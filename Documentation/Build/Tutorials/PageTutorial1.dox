/**
	\page PageTutorial1 Your first 3dNovac application\n(The Minimal code to start a project with the Graphical engine)

	<div class="title">Introduction</div>
	This tutorial will explain you how to create your first application using the multithreaded engine abstraction step by step.

	<div class="title">Package used:</div>
		- Nc-Core
		- Nc-Graphics

	<div class="title">Create your own Engine</div>
	To create our engine we will inherite to the Engine::MainEngine.

	The MainEngine is designed to simplify the creation of application which receive events.
	So you will have to implement these virtual pure methods:
		- Update, will be called in the engine's loop to update your scene.
		- keyboardEvent, to receive keyboard event.
		- MouseButtonEvent, to receive mouse button events.
		- MouseMotionEvent, to receive mouse movement events.

	But because we want to use the Graphic engine, we need to create a context opengl.
	To do so, you will need to redefine the following methods:
		- CreateContext, to create a shared context with the one created into the graphic engine.
		- ActiveContext, to active the context created.
		- DisableContext, to disable the context.

	You will also have to create the following methods:
		- LoadContent, to load your content.
		- ReleaseContent, to release your content.

	And because the first thing needed into a graphical application is a window, the engine will take a Window in it's contructor.
	The engine will also create a scene, a camera and a repere into it's LoadContent method.
	Finaly, to be able to visualize the repere in a 3 dimension space, we have to send events to the camera.

\p Examples/Tuto1/GameEngine.h
\include Tuto1/GameEngine.h

\p Examples/Tuto1/GameEngine.cpp
\include Tuto1/GameEngine.cpp


	<div class="title">Instantiate the Engine: (main.cpp)</div>
	Ok now that we have created our game engine, we need to instantiate it in the main.

	For that will need to create an Engine::Manager and a Window for the Graphic::Engine.

\p Examples/Tuto1/main.cpp
\include Tuto1/main.cpp

	Ok for the main, but if you look at the creation of the Manager, you'll see that you need a conf file: "3dNovac.conf"

\p Examples/bin/3dNovac.conf
\include bin/3dNovac.conf

	<div class="title">Conclusion</div>
	Voila !

	Now you have a window with a repere, and you can move the camera and resize the window.

	The minimalist code to use a Graphic::Engine is pretty consequent. But once you've got that code, it is really easy to create your own game.
	For an example of a simple game created with 3dNovac, have a look to the Sokoban demo, it's code is available into the folder "/Demo".


	<div class="tutorialFooter">Author(s): Ponpon </div>
*/
