
/*-----------------------------------------------------------------------------

	3dNovac Graphics
	Copyright (C) 2010-2011, The 3dNovac Team

    This file is part of 3dNovac.

    3dNovac is free software: you can redistribute it and/or modify
    it under the terms of the GNU Lesser General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    3dNovac is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU Lesser General Public License for more details.

    You should have received a copy of the GNU Lesser General Public License
    along with 3dNovac.  If not, see <http://www.gnu.org/licenses/>.

    File Created At:        15/11/2011
    File Author(s):         Poncin Matthieu

-----------------------------------------------------------------------------*/

#ifndef NC_GRAPHICS_EFFECT_BILLBOARD_H_
#define NC_GRAPHICS_EFFECT_BILLBOARD_H_

#include "Effect.h"

namespace Nc
{
    namespace Graphic
    {
        /// Simulate a billboarding effect
        /**
            Billboarding is a method in which a sprite is rendered perpendicular to the camera without respect to camera movement and the sprite used is called a billboard.

            To use the Billboard class you just have to add an object like a String or a Sprite as child. You can call the method RotateChilds after adding the child to setup it's matrix carrectly (in the case of a Sprite or String).

            The billboard has 2 operation mode:
                - HalfBillboard, the billboard will be oriented to face up the plane of the target. This mode can be usefull to display a String in a 3 Dimension world. This is the default mode.
                - TrueBillboard, the billboard will be oriented to face up the target position. \warning this mode has never been tested in real situation.

            The billboard can either be used to facing an entity to the current rendering camera but also be used to facing an entity to another entity.
            If the facing object is not set, the current rendering camera will be used.

            To save performance, the billboard is not compute with any normal or up vector. So it's up to you to set up the normal of the childs correctly (The method RotateChilds is usefull to setup the Matrix of a String or a Sprite).
            Except in the case of the camera, we will use the lookAt vector (0,1,0) and up vector (0,0,1) for any targeted entity.

            The camera should be a Camera3d, we don't check the type of the camera for performance issue (static_cast).

            \todo It could be interesting to add a way to set up a camera as billboard to track an object with the camera. Actualy, that shouldn't be possible because of the view matrix generated by the camera don't give a shit to the current model matrix at the rendering.
            \todo the matrix transformation doesn't work properly if the childs add their own matrix, right now it work with Texts because we have overloaded the method to change the matrix...
        */
        class LGRAPHICS Billboard : public Effect
        {
            public:
                NC_SYSTEM_DEFINE_OBJECT_VISITABLE(Effect, System::Object, Nc::Graphic::Billboard);

                enum Pattern
                {
                    HalfBillboard,
                    TrueBillboard
                };

            public:
                Billboard(Pattern p = HalfBillboard, Entity *target = NULL);

                virtual ISceneNode      *Clone() const                      {return new Billboard(*this);}

                /** Rotate the matrix of the childs. This function help to set up the matrix of a sprite or a string */
                virtual void            RotateChilds();

                /** \return the pattern of the billboard */
                Pattern                 GetPattern() const                  {return _pattern;}
                /** Set the pattern of the billboard */
                void                    SetPattern(Pattern p)               {_pattern = p;}

                /** \return the target of the billboard, if the target is null, the true target is the current camera at the rendering */
                Entity                  *Target() const                     {return _targetEntity;}
                /** Set the target of the billboard */
                void                    Target(Entity *entity)              {_targetEntity = entity;}

            protected:
                virtual void            Render(SceneGraph *scene);

            private:
                void                    GetTargetPosUp(SceneGraph *scene, Vector3f &pos, Vector3f &up);
                void                    GetTargetLookAtCenter(SceneGraph *scene, const Vector3f &pos, Vector3f &lookAt, Vector3f &center);

                void                    OrientBillboard(SceneGraph *scene);

            protected:
                Entity          *_targetEntity;     ///< if the target entity is set, the childs will faced to the target entity and not to the current camera
                Pattern         _pattern;
        };
    }
}

#endif
